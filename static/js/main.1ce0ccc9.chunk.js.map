{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","open","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","state","performSearch","searchTerm","console","log","urlString","process","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","event","target","term","className","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOA6BeA,G,0LAxBX,IAAMC,EAAM,oCAAqCC,KAAKC,MAAMC,MAAMC,GAGlEC,OAAOC,KAAKN,EAAK,Y,+BAGf,OAAO,2BAAOO,IAAKN,KAAKC,MAAMC,MAAMC,IAClC,+BACE,4BACE,4BACF,yBAAKI,IAAK,SAASC,MAAM,MAAMC,IAAKT,KAAKC,MAAMC,MAAMQ,cAEnD,4BACA,4BAAKV,KAAKC,MAAMC,MAAMS,OACtB,2BAAIX,KAAKC,MAAMC,MAAMU,UACpB,2BAAOC,KAAK,SAASC,QAASd,KAAKe,UAAUC,KAAKhB,MAAOiB,MAAM,iB,GAlBrDC,IAAMC,Y,gBCsFdC,E,YAjFb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAO,GAab,EAAKC,gBAfa,E,2EAiBLC,GAAY,IAAD,OACzBC,QAAQC,IAAI,gCACV,IAAMC,EAAY,4DAAqDC,mCAArD,WAAmGJ,EACvHK,IAAEC,KAAK,CACL9B,IAAK2B,EACLI,QAAS,SAACC,GACRP,QAAQC,IAAI,6BAEZ,IAAMO,EAAUD,EAAcC,QAG1BC,EAAY,GAEhBD,EAAQE,SAAQ,SAAChC,GACfA,EAAMQ,WAAY,kDAAoDR,EAAMiC,YAC1E,IAAMC,EAAW,kBAAC,EAAD,CAAU9B,IAAKJ,EAAMC,GAAID,MAAOA,IACnD+B,EAAUI,KAAKD,MAEjB,EAAKE,SAAS,CAACC,KAAMN,KAEvBO,MAAM,SAACC,EAAKC,EAAQC,GAClBnB,QAAQgB,MAAM,6B,0CAKEI,GAClBpB,QAAQC,IAAImB,EAAMC,OAAO5B,OACzB,IACM6B,EAAMF,EAAMC,OAAO5B,MADLjB,KAERsB,cAAcwB,K,+BAI5B,OACE,6BACC,2BAAOC,UAAU,YACjB,+BACE,4BACE,4BACA,yBAAKxC,IAAI,OAAOC,MAAM,KAAKC,IAAI,kBAE/B,wBAAID,MAAM,MACV,4BACD,kDAKR,2BAAOwC,MAAO,CACZC,SAAU,GACVC,QAAS,QACT1C,MAAO,OACP2C,WAAY,EACZC,cAAe,EACfC,YAAa,IACZC,SAAUtD,KAAKuD,oBAAoBvC,KAAKhB,MAAOwD,YAAY,sBAE7DxD,KAAKqB,MAAMkB,U,GA5EMpB,aCMEsC,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1ce0ccc9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass MovieRow extends React.Component {\r\n  viewMovie() {\r\n    // console.log(this.props.movie.title)\r\n    const url = \"https://www.themoviedb.org/movie/\" +this.props.movie.id\r\n    \r\n\r\n    window.open(url, \"_blank\")\r\n  }\r\n    render () {\r\n      return <table key={this.props.movie.id}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n          <img alt =\"poster\" width=\"100\" src={this.props.movie.poster_src} />\r\n            </td>\r\n            <td>\r\n            <h3>{this.props.movie.title}</h3> \r\n            <p>{this.props.movie.overview}</p> \r\n             <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      \r\n    }\r\n}\r\n\r\nexport default MovieRow\r\n\r\n\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js';\nimport $ from 'jquery'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state= {}\n    \n\n    \n   // var movieRows =[]\n   // movies.forEach((movie) => {\n    //  console.log(movie.title)\n   //   const movieRow = <MovieRow movie={movie} />\n  //  movieRows.push(movieRow)\n   // })\n\n   // this.state = {rows: movieRows}\n\n   this.performSearch()\n  }\n  performSearch(searchTerm){\n  console.log(\"Perform search using moviedb\")\n    const urlString = `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_TMDb_API_KEY}&query=` + searchTerm\n  $.ajax({\n    url: urlString,\n    success: (searchResults) => {\n      console.log(\"fetched data successfully\")\n      // console.log(searchResults)\n      const results = searchResults.results\n      // console.log(results[0])\n\n      var movieRows = []\n\n      results.forEach((movie) => {\n        movie.poster_src =\"https://image.tmdb.org/t/p/w185_and_h278_bestv2\" + movie.poster_path\n          const movieRow = <MovieRow key={movie.id} movie={movie}/>\n        movieRows.push(movieRow)\n      })\n      this.setState({rows: movieRows})\n    },\n    error:(xhr, status, err) => {\n      console.error(\"Failed to fetch data\")\n    }\n  })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const term =event.target.value\n    boundObject.performSearch(term)\n  }\n  \nrender() {\n  return (\n    <div>\n     <table className=\"titleBar\">\n     <tbody>\n       <tr>\n         <td>\n         <img alt=\"icon\" width=\"50\" src=\"moviesdb.svg\"/>\n         </td>\n         <td width=\"8\" />\n         <td>\n        <h3> MoviesDB Info</h3>\n         </td>\n          </tr>\n     </tbody>\n    </table> \n<input style={{\n  fontSize: 24,\n  display: 'block',\n  width: \"100%\",\n  paddingTop: 8,\n  paddingBottom: 8,\n  paddingLeft: 16\n}} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter search term\"/>\n\n{this.state.rows}\n    \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}